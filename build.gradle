plugins {
	id 'java'
	id 'org.springframework.boot' version '2.5.9'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'

	/**
	 * AsciiDoctor
	 **/
	id "org.asciidoctor.jvm.convert" version "3.3.2"

	/**
	 * Node (vue.js Build)
	 **/
//	id "com.github.node-gradle.node" version "3.0.1"
}

group = 'cat.community'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()

	/* Vue build */
	gradlePluginPortal()
}

dependencies {
	/**
	 * Spring Framework
	 **/
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-tomcat'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	/**
	 * File Upload
	 **/
	implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.4'

	/**
	 * Lombok
	 **/
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'javax.mail:mail:1.4.7'

	/**
	 * JPA, MYSQL, QUERYDSL
	 **/
	implementation 'mysql:mysql-connector-java'
	runtimeOnly 'mysql:mysql-connector-java'

	implementation 'com.querydsl:querydsl-core'
	implementation 'com.querydsl:querydsl-jpa'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

	/**
	 * AsciiDOC - SpringRESTDOC
	 **/
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.6.RELEASE'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.6.RELEASE'

}

ext {
	snippetsDir = file('build/generated-snippets')
}

test {
	useJUnitPlatform()
	scanForTestClasses = false
	include "**/*Test.class"
	outputs.dir snippetsDir
}

asciidoctor {
	inputs.dir snippetsDir
	configurations 'asciidoctorExt'
	dependsOn test
}

bootJar {
	enabled = true
	dependsOn asciidoctor

	copy {
		from asciidoctor.outputDir
		into "src/main/resources/templates/docs"
	}
}

jar {
	enabled = false
}

//node {
//	/**
//	 * 특정 Node.js 버전을 다운로드 및 설치 할 지 여부
//	 * true: 다운로드 및 설치
//	 * false: 전역으로 설치된 Node.js 사용함.
//	 */
//	download = true
//
//	/**
//	 * download가 true일 경우에만 사용
//	 * version에 명시한 버전으로 Node.js 다운로드 및 설치
//	 * workDir에 설치됨
//	 */
//	version = "18.16.0"
//
//	/**
//	 * 사용할 npm 버전을 지정하면 npmWorkDir에 설치됨
//	 * npm 버전을 지정하지 않으면 Node.js에 번들로 제공되는 npm 버전으로 사용됨
//	 */
//	npmVersion = "9.5.1"
//
//	/**
//	 * download가 true일 경우에만 사용
//	 * Node.js 배포를 가져오기 위한 기본 URL
//	 */
//	distBaseUrl = "https://nodejs.org/dist"
//
//	/**
//	 * npmInstall 작업에 의해 실행되는 npm 명령
//	 * 기본적으로 설치되지만 ci로 변경할 수 있음
//	 */
//	npmInstallCommand = "install"
//
//	/**
//	 * download가 true일 경우에만 사용
//	 * Node.js가 압축 해제된 디렉토리
//	 */
//	workDir = file("${project.projectDir}/.gradle/nodejs")
//
//	/**
//	 * npm이 설치된 디렉토리 (특정 버전이 정의된 경우)
//	 */
//	npmWorkDir = file("${project.projectDir}/.gradle/npm")
//
//	/**
//	 * vue 프로젝트 디렉토리 위치
//	 * package.json 파일과 node_modules 디렉토리가 있는 곳
//	 * "저는 프로젝트 Root 아래 vue 프로젝트를 생성하였으므로 아래와 같이 주소를 작성해주었습니다."
//	 */
//	nodeProjectDir = file("${project.projectDir}/front")
//
//	// Whether the plugin automatically should add the proxy configuration to npm and yarn commands
//	// according the proxy configuration defined for Gradle
//	// Disable this option if you want to configure the proxy for npm or yarn on your own
//	// (in the .npmrc file for instance)
//	nodeProxySettings = ProxySettings.SMART
//}
//
///**
// * vue-project를 build하기 위한 설정
// * - node gradle 추가
// */
//apply plugin: 'com.github.node-gradle.node'
//
///**
// * vue-project를 build하기 위한 설정
// * - vue-project의 기존 빌드 결과물을 제거하기 위한 task
// */
//task deleteVueBuildFiles(type: Delete) {
//	delete "src/main/resources/static/", "src/main/resources/static/index.html", "${project.projectDir}/front/node_modules"
//}
//
///**
// * vue-project를 build하기 위한 설정
// * - vue-project를 빌드하기 위한 npm build task
// *
// * dependsOn에 'deleteVueBuildFiles', 'npmInstall' task 정보를 지정하였으므로
// * npmBuild task는 위 두 task에 의존한다는 것이고,
// * npmBuild가 실행되기 전 위 두 task가 차례대로 먼저 실행됩니다.
// * deleteVueBuildFiles task는 빌드 결과물을 제거하기 위하여 별도 만든 task이고,
// * npmInstall task는 node plugin에서 제공하는 task입니다.
// */
//task npmBuild(type: NpmTask, dependsOn: ['deleteVueBuildFiles', 'npmInstall']) {
//	args = ["run", "build"]
//}
//
///**
// * vue-project를 build하기 위한 설정
// * node gradle에서 제공하는 npmInstall task를 어느 시점에 실행시켜 줄지 지정해주는 것입니다.
// * "gradle build 시 수행되는 processResources task가 실행되기 전에 npmBuild task를 실행하라"
// *
// * 그리고 npmBuild task의 의존으로 deleteVueBuildFiles, npmInstall task가 있으므로,
// * "npmBuild task가 실행하기 전에 deleteVueBuildFiles, npmInstall task를 순서대로 실행하라."
// *
// * 정리한 task 실행 순서는
// * 1) deleteVueBuildFiles
// * 2) npmInstall
// * 3) npmBuild
// * 4) processResources
// * 입니다.
// */
//processResources.dependsOn 'npmBuild'

